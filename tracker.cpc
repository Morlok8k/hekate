/*
Copyright (c) 2009 by Pejman Attar, Yoann Canal, Juliusz Chroboczek and
                      Gabriel Kerneis

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

#define _GNU_SOURCE

#include <curl/curl.h>
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "hashtable.h"
#include "list.h"
#include "tracker.h"

#define TRACKER_TIMER 1800

char peer_id[21];
char *port = "6969";
int notracker = 0;

char *
generate_get(char *url, ht_torrent *t, char *event, CURL *e_handler)
{
    int length, rc;
    char *res, *hash;

    hash = curl_easy_escape(e_handler, (char *)t->info_hash, 20);
    if(!hash) {
        fprintf(stderr, "Error (generate_get) : curl_easy_escape\n");
        return NULL;
    }
    rc = asprintf(&res, "%s%cinfo_hash=%s&peer_id=%.20s&port=%s&"
                  "uploaded=0&downloaded=0&left=0&event=%s"
                  "&compact=1&numwant=1&no_peer_id=1",
                  url, strchr(url, '?') ? '&' : '?',
                  hash, peer_id, port, event);
    if(rc < 0)
        res = NULL;
    curl_free(hash);
    return res;
}

size_t
writer(void  *ptr, size_t size, size_t nmemb, void *stream)
{
    return nmemb;
}

/* This works around a bug in CPC. */
cps void connection(tr_list *t, int timer);

cps void
connection(tr_list *t, int timer)
{
    CURLcode rc = NULL;
    CURL *e_handle = NULL;
    char *request = NULL;
    to_list *current = NULL;
    long http_code;

    cpc_sleep(timer);

    if(strncmp(t->url, "http://", 7) != 0) {
        fprintf(stderr, "(connection)bad tracker url: %s\n", t->url);
        return;
    };

    e_handle = curl_easy_init();
    if(!e_handle) goto fail;

    for(current = t->head; current; current  = current -> next) {
        request = generate_get(t->url, current->elmt, "started", e_handle);
        if(!request) {
            perror("(connection)generate_get");
            continue;
        }

        rc = curl_easy_setopt(e_handle, CURLOPT_URL, request);
        if(rc != CURLE_OK) goto curl_error;

        /* The protocol for double-stack torrents is pretty broken; the
           ``&ip='' hack cannot work.  Just disable IPv6 for now. */
        rc = curl_easy_setopt(e_handle, CURLOPT_IPRESOLVE, CURL_IPRESOLVE_V4);
        if(rc != CURLE_OK) goto curl_error;

        rc = curl_easy_setopt(e_handle, CURLOPT_WRITEFUNCTION, writer);
        if(rc != CURLE_OK) goto curl_error;

        cpc_detach;
        rc = curl_easy_perform(e_handle);
        cpc_attach;
        if(rc != CURLE_OK) goto curl_error;

        rc = curl_easy_getinfo(e_handle, CURLINFO_RESPONSE_CODE, &http_code);
        if(rc != CURLE_OK) goto curl_error;
        if(http_code != 200) {
            fprintf(stderr, "Warning: tracker returned %ld (%s).\n",
                    http_code, request);
        }

        free(request);
        continue;

    curl_error:
        fprintf(stderr, "curl error: %s (%s)\n",
                curl_easy_strerror(rc), request);
        free(request);
        curl_easy_cleanup(e_handle);
        e_handle = curl_easy_init();
        if(!e_handle) goto fail;
    }

    curl_easy_cleanup(e_handle);

    cpc_spawn connection(t, TRACKER_TIMER);
    return;

 fail:
    fprintf(stderr, "Couldn't allocate CURL request.\n");
    cpc_spawn connection(t, TRACKER_TIMER);
}

void
init_trackers()
{
    tr_list *current;

    if(notracker)
        return;

    if(trackers == NULL)
        fprintf(stderr, "Warning: no trackers!\n");

    current = trackers;

    while(current) {
        cpc_spawn connection(current, 0);
        current = current -> next;
    }
}
