/*
Copyright (c) 2009 by Pejman Attar, Yoann Canal, Juliusz Chroboczek and
                      Gabriel Kerneis

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

#define _GNU_SOURCE

#include <curl/curl.h>
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <fcntl.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <openssl/sha.h>

#include "dht/dht.h"

#include "io.h"
#include "list.h"
#include "torrent.h"
#include "server.h"
#include "tracker.h"

char peer_id[21];
int notracker = 0, nodht = 0;
int noipv4 = 0;
int noipv6 = 0;

#define MAX(x, y) ((x) >= (y) ? (x) : (y))

char *
generate_get(char *url, struct torrent *t, char *event, CURL *e_handler)
{
    int length, rc;
    char *res, *hash;

    hash = curl_easy_escape(e_handler, (char *)t->info_hash, 20);
    if(!hash) {
        fprintf(stderr, "Error (generate_get) : curl_easy_escape\n");
        return NULL;
    }

    rc = asprintf(&res, "%s%cinfo_hash=%s&peer_id=%.20s&port=%d&"
                  "uploaded=%lu&downloaded=0&left=0%s%s"
                  "&compact=1&numwant=0&no_peer_id=1",
                  url, strchr(url, '?') ? '&' : '?', hash, peer_id, peer_port,
                  (unsigned long)t->uploaded,
                  event ? "&event=" : "", event ? event : NULL);
    if(rc < 0)
        res = NULL;
    curl_free(hash);
    return res;
}

size_t
writer(void *ptr, size_t size, size_t nmemb, void *stream)
{
    struct torrent *tor = stream;
    char *p;
    int interval = -1;

    /* We really should reassemble the pieces and use a proper bencoding
       parser.  This will do for now. */
    p = memmem(ptr, size * nmemb, "8:intervali", 11);
    if(p && p < ptr + size * nmemb) {
        p += 11;
        interval = 0;
        while(p < ptr + size * nmemb && *p >= '0' && *p <= '9') {
            interval = interval * 10 + (*p - '0');
            p++;
        }
        if(interval < 120 || interval > 24 * 3600) {
            fprintf(stderr, "Unexpected interval %d\n", interval);
            interval = -1;
        }
    }

    tor->update_interval = interval;
    return nmemb;
}

cps void
connection(tr_list *t, int ipv6, char *event)
{
    CURLcode rc = NULL;
    CURL *e_handle = NULL;
    char *request = NULL;
    to_list *current = NULL;
    long http_code;
    int interval = -1;

    if(strncmp(t->url, "http://", 7) != 0) {
        fprintf(stderr, "(connection)bad tracker url: %s\n", t->url);
        return;
    };

    e_handle = curl_easy_init();
    if(!e_handle) goto fail;
    cpc_sched *sched = cpc_detach();
    for(current = t->head; current; current = current->next) {
        request = generate_get(t->url, current->elmt, event, e_handle);
        if(!request) {
            perror("(connection)generate_get");
            continue;
        }

        rc = curl_easy_setopt(e_handle, CURLOPT_URL, request);
        if(rc != CURLE_OK) goto curl_error;

        rc = curl_easy_setopt(e_handle, CURLOPT_FOLLOWLOCATION, 1);
        if(rc != CURLE_OK) goto curl_error;

        rc = curl_easy_setopt(e_handle, CURLOPT_MAXREDIRS, 8);
        if(rc != CURLE_OK) goto curl_error;

        rc = curl_easy_setopt(e_handle, CURLOPT_IPRESOLVE,
                              ipv6 ? CURL_IPRESOLVE_V6 : CURL_IPRESOLVE_V4);
        if(rc != CURLE_OK) goto curl_error;

        rc = curl_easy_setopt(e_handle, CURLOPT_WRITEDATA, current->elmt);
        if(rc != CURLE_OK) goto curl_error;

        rc = curl_easy_setopt(e_handle, CURLOPT_WRITEFUNCTION, writer);
        if(rc != CURLE_OK) goto curl_error;

        rc = curl_easy_perform(e_handle);
        if(rc != CURLE_OK) goto curl_error;

        rc = curl_easy_getinfo(e_handle, CURLINFO_RESPONSE_CODE, &http_code);
        if(rc != CURLE_OK) goto curl_error;
        if(http_code != 200) {
            fprintf(stderr, "Warning: tracker returned %ld (%s).\n",
                    http_code, request);
        }

        free(request);

        if(current->elmt->update_interval > 0) {
            if(interval < 0)
                interval = current->elmt->update_interval;
            else
                interval = MAX(interval, current->elmt->update_interval);
        }

        continue;

    curl_error:
        if(noipv4 || !ipv6)
            fprintf(stderr, "curl error: %s (%s)\n",
                    curl_easy_strerror(rc), request);
        free(request);

        curl_easy_cleanup(e_handle);
        e_handle = curl_easy_init();
        if(!e_handle) goto fail;
    }
    cpc_attach(sched);
    curl_easy_cleanup(e_handle);

    cpc_sleep(interval > 0 ? interval : 1800);
    connection(t, ipv6, NULL);
    return;

 fail:
    fprintf(stderr, "Couldn't allocate CURL request.\n");
    cpc_sleep(interval > 0 ? interval : 1800);
    connection(t, ipv6, event);
}

static int dht_socket = -1;

cps void
dht_announcer(int type)
{
    while(1) {
        int rc;
        tr_list *current;

        /* Wait for the DHT to be ready. */
        while(1) {
            rc = dht_nodes(type, NULL, NULL, NULL, NULL);
            if(rc >= 16)
                break;
            cpc_sleep(30 + random() % 30, random() % 1000000);
        }

        current = trackers;
        while(current) {
            to_list *tor = current->head;
            while(tor) {
                if(!tor->elmt->private)
                    dht_search(tor->elmt->info_hash, peer_port, type,
                               NULL, NULL);
                tor = tor->next;
            }
            cpc_sleep(0, random() % 1000000);
            current = current->next;
        }

        cpc_sleep(25 * 60 + random() % (3 * 60), random() % 1000000);
    }
}

cps void
dht_loop(int dht_socket)
{
    static time_t tosleep = 0;  /* static because of CPC bug */
    static int sleeping = 0;    /* idem */

    while(1) {
        int rc;
        cpc_timeout *timeout;

        timeout = cpc_timeout_get(tosleep, random() % 1000000);

        /* rc =*/ cpc_io_wait(dht_socket, CPC_IO_IN,
                              cpc_timeout_condvar(timeout));
        rc = !cpc_timeout_expired(timeout);

        cpc_timeout_destroy(timeout);

        rc = dht_periodic(!!rc, &tosleep, NULL, NULL);

        if(rc < 0) {
            if(errno == EINTR) {
                continue;
            } else {
                perror("dht_periodic");
                if(rc == EINVAL || rc == EFAULT)
                    abort();
                tosleep = 1;
            }
        }
    }
}

void
init_trackers()
{
    tr_list *current;
    int rc;

    if(!notracker) {
        if(trackers == NULL)
            fprintf(stderr, "Warning: no trackers!\n");

        current = trackers;

        while(current) {
            if(!noipv4)
                cpc_spawn connection(current, 0, "started");
            if(!noipv6)
                cpc_spawn connection(current, 1, "started");
            current = current -> next;
        }
    }

    if(!nodht) {
        static unsigned char dht_id[20];
        struct sockaddr_in sin;
        unsigned char v[4] = "HK\0\0";

        rc = dht_random_bytes(dht_id, 20);
        if(rc < 20) {
            perror("random(dht_id)");
            goto dht_done;
        }

        dht_socket = socket(PF_INET, SOCK_DGRAM, 0);
        if(dht_socket < 0) {
            perror("socket(dht)");
            goto dht_done;
        }

        memset(&sin, 0, sizeof(sin));
        sin.sin_family = AF_INET;
        sin.sin_port = htons(peer_port);

        rc = bind(dht_socket, (struct sockaddr*)&sin, sizeof(sin));
        if(rc < 0) {
            perror("bind(dht_socket)");
            goto dht_fail;
        }

        if(getenv( "HK_DHT_VERBOSE") != NULL )
            dht_debug = stderr;

        rc = dht_init(dht_socket, -1, dht_id, v);
        if(rc < 0)
            goto dht_fail;

        cpc_spawn dht_loop(dht_socket);
        cpc_spawn dht_announcer(sin.sin_family);
        goto dht_done;

    dht_fail:
        close(dht_socket);
    dht_done:
        ;
    }
}

/* DHT callbacks */

void
dht_hash(void *hash_return, int hash_size,
         const void *v1, int len1,
         const void *v2, int len2,
         const void *v3, int len3)
{
    static SHA_CTX ctx;
    unsigned char sha1[20];
    SHA1_Init(&ctx);
    SHA1_Update(&ctx, v1, len1);
    SHA1_Update(&ctx, v2, len2);
    SHA1_Update(&ctx, v3, len3);
    SHA1_Final(sha1, &ctx);
    if(hash_size > 20)
        memset((char*)hash_return + 20, 0, hash_size - 20);
    memcpy(hash_return, sha1, hash_size > 20 ? 20 : hash_size);
}

static int devrandom = -1;

int
dht_random_bytes(void *buf, size_t size)
{
    int fd, rc, save;

    if(devrandom < 0) {
        devrandom = open("/dev/urandom", O_RDONLY);
        if(devrandom < 0)
            return -1;
    }

    rc = read(devrandom, buf, size);
    return rc;
}
