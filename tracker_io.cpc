#include <assert.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <curl/curl.h>

#include "hashtable.h"
#include "list.h"

#define TRACKER_TIMER 1800

char *peer_id = "BittorrentSeeder-000"; /* XXX escape the peer_id somewhere */
char *port = "6969";

char *
generate_get(ht_torrent * t, CURL * e_handler)
{
    int length;
    char *res , *hash;
    hash = curl_easy_escape(e_handler, (char *)t->info_hash, 20);
    
    length =
        strlen(t->tracker)  /* url */
        + 11 + strlen(hash) /* ?info_hash=_hash_ */
        + 29                /* :peer_id=_peer_id_ */
        + 6 + strlen(port)  /* :port= */
        + 11                /* :uploaded=0 */
        + 13                /* :downloaded=0 */
        + 7                 /* :left=0 */
        + 14                /* :event=started */
	+1;

    
    res = malloc(length);
    assert(res);
    snprintf(res ,length, "%s?info_hash=%s&peer_id=%.20s&port=%s&"
	     "uploaded=0&downloaded=0&left=0&event=started",
	     t->tracker , hash, peer_id, port);

    curl_free(hash);
    return res;
}

size_t
writer(void  *ptr ,size_t size ,size_t nmemb,void *stream )
{
    int i;
    size_t realsize = size * nmemb;
    return 0;
}

cps void
connection(list *torrents, int timer)
{
    CURLcode rc;
    CURL *e_handle;
    char *url, *tracker;
    list *current;

    cpc_sleep(timer);

    if(!(current=torrents)) return;
    tracker = ((ht_torrent *)current->elmt)->tracker;

    if(strncmp(tracker ,"http://",7 ) != 0){
	fprintf(stderr,"(connection)bad tracker url: %s\n", tracker);
	return;
    }

    do{
	url = generate_get((ht_torrent *)current->elmt , e_handle);
	if(!url){ perror("(connection)generate_get"); continue; }

	rc = curl_easy_setopt(e_handle ,CURLOPT_URL ,url );
	if(rc!=CURLE_OK) goto curl_error;

	rc = curl_easy_setopt(e_handle ,CURLOPT_WRITEFUNCTION ,writer );
	if(rc!=CURLE_OK) goto curl_error;

	cpc_detach;
	rc = curl_easy_perform(e_handle);
	cpc_attach;
	if(!rc) goto curl_error;

	free(url);
    } while((current  = current -> next));

    curl_easy_cleanup(e_handle);

    cpc_spawn(torrents, TRACKER_TIMER);

    return;

 curl_error:
    curl_easy_strerror(rc);
    exit(EXIT_FAILURE);
}

void
init_trackers(list *trackers)
{
    list *current = trackers;

    while(current){
	cpc_spawn connection(current, 0);
	current = current->next;
    }
}

