#define _GNU_SOURCE

#include <curl/curl.h>
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "hashtable.h"
#include "list.h"
#include "tracker_io.h"

#define TRACKER_TIMER 1800

char peer_id[21];
char *port = "6969";
int notracker = 0;

char *
generate_get(char *url, ht_torrent *t, char *event, CURL *e_handler)
{
    int length, rc;
    char *res, *hash;

    hash = curl_easy_escape(e_handler, (char *)t->info_hash, 20);
    if(!hash) {
        fprintf(stderr, "Error (generate_get) : curl_easy_escape\n");
        return NULL;
    }
    rc = asprintf(&res, "%s?info_hash=%s&peer_id=%.20s&port=%s&"
                  "uploaded=0&downloaded=0&left=0&event=%s",
                  url, hash, peer_id, port, event);
    if(rc < 0)
        res = NULL;
    curl_free(hash);
    return res;
}

size_t
writer(void  *ptr, size_t size, size_t nmemb, void *stream)
{
    return 0;
}

cps void
connection(tr_list *t, int timer)
{
    CURLcode rc = NULL;
    CURL *e_handle = NULL;
    char *request = NULL;
    to_list *current = NULL;

    cpc_sleep(timer);

    if(strncmp(t->url, "http://", 7) != 0) {
        fprintf(stderr, "(connection)bad tracker url: %s\n", t->url);
        return;
    };

    e_handle = curl_easy_init();
    if(!e_handle) goto curl_error;

    for(current = t->head; current; current  = current -> next) {
        request = generate_get(t->url, current->elmt, "started", e_handle);
        if(!request) {
            perror("(connection)generate_get");
            continue;
        }

        rc = curl_easy_setopt(e_handle, CURLOPT_URL, request);
        if(rc != CURLE_OK) goto curl_error;

        rc = curl_easy_setopt(e_handle, CURLOPT_WRITEFUNCTION, writer);
        if(rc != CURLE_OK) goto curl_error;

        cpc_detach;
        rc = curl_easy_perform(e_handle);
        cpc_attach;
        if(!rc) goto curl_error;

        free(request);
    }

    curl_easy_cleanup(e_handle);

    cpc_spawn(t, TRACKER_TIMER);

    return;

 curl_error:
    fprintf(stderr, "curl error: %s\n", curl_easy_strerror(rc));
    curl_easy_strerror(rc);
    exit(EXIT_FAILURE);
}

void
init_trackers()
{
    tr_list *current;

    if(notracker)
        return;

    if(trackers == NULL)
        fprintf(stderr, "Warning: no trackers!\n");

    current = trackers;

    while(current) {
        cpc_spawn connection(current, 0);
        current = current -> next;
    }
}
