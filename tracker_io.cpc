#include <curl/curl.h>
#include <assert.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "hashtable.h"
#include "list.h"
#include "tracker_io.h"

#define TRACKER_TIMER 1800

char *peer_id = "BittorrentSeeder-000"; /* XXX escape the peer_id somewhere */
char *port = "6969";

char *
generate_get(char *url, ht_torrent * t, CURL *e_handler)
{
    int length;
    char *res , *hash;

    hash = curl_easy_escape(e_handler, (char *)t->info_hash, 20);
    if(!hash){
	fprintf(stderr, "Error (generate_get) : curl_easy_escape\n");
	/*XXX is this a real good idea to return a NULL?!*/
	return NULL;
    }
    length =
        strlen(url)         /* url */
        + 11 + strlen(hash) /* ?info_hash=_hash_ */
        + 29                /* :peer_id=_peer_id_ */
        + 6 + strlen(port)  /* :port= */
        + 11                /* :uploaded=0 */
        + 13                /* :downloaded=0 */
        + 7                 /* :left=0 */
        + 14                /* :event=started */
        +1;

    res = malloc(length);
    assert(res);
    snprintf(res ,length, "%s?info_hash=%s&peer_id=%.20s&port=%s&"
             "uploaded=0&downloaded=0&left=0&event=started",
             url , hash, peer_id, port);

    curl_free(hash);
    return res;
}

size_t
writer(void  *ptr ,size_t size ,size_t nmemb,void *stream )
{
    int i;
    size_t realsize = size * nmemb;
    return 0;
}

cps void
connection(tr_list *trackers, int timer)
{

    CURLcode rc = NULL;
    CURL *e_handle = NULL;
    char *request = NULL, *tracker = NULL;
    to_list *current = NULL;

    cpc_sleep(timer);

    current = trackers->head;

    if(strncmp(trackers->url, "http://", 7) != 0){
	fprintf(stderr, "(connection)bad tracker url: %s\n",
		trackers->url);
	return;
    };

    e_handle = curl_easy_init();
    if(!e_handle) goto curl_error;
    
    do{
	request = generate_get(trackers->url, current->elmt, e_handle);
	if(!request){
	    perror("(connection)generate_get");
	    continue;
	}

        rc = curl_easy_setopt(e_handle ,CURLOPT_URL, request );
        if(rc!=CURLE_OK) goto curl_error;
	
        rc = curl_easy_setopt(e_handle ,CURLOPT_WRITEFUNCTION ,writer );
        if(rc!=CURLE_OK) goto curl_error;

        cpc_detach;
        rc = curl_easy_perform(e_handle);
        cpc_attach;
        if(!rc) goto curl_error;

        free(request);
    } while((current  = current -> next));

    curl_easy_cleanup(e_handle);

    cpc_spawn(trackers, TRACKER_TIMER);

    return;
    
 curl_error:
    fprintf(stderr, "curl error: %s\n", curl_easy_strerror(rc));
    curl_easy_strerror(rc);
    exit(EXIT_FAILURE);
}

void
init_trackers()
{
    tr_list *current = trackers;
    /* TODO useless with a new .torrent checker daemon */
    assert(trackers);
    while(current){
        cpc_spawn connection(current->head, 0);
        current = current->next;
    }
}
